# Hotel Management System ‚Äì Specification Document  
**Authors**: ESSETTI Yasmine, MASMOUDI Nour  
**Date**: 2024/2025  

---

## 1. Introduction  

### 1.1 Project Overview  
The Hotel Management System (HMS) is a Java-based application designed to streamline hotel operations, including:  
- **Two user roles**:  
  - Administrators (manage rooms/users/bookings)  
  - Guests (book rooms, view reservations)  
- **In-memory data storage**: Uses Java `ArrayLists` (no database)  
- **GUI**: Built with NetBeans (Swing) for usability  

### 1.2 Motivations  
- Address inefficiencies in manual hotel management  
- Provide a scalable solution for small to mid-sized hotels  
- Academic exercise in object-oriented design  

---

## 2. Specification  

### 2.1 Key Concepts & Constraints  

#### Actors:  
- **Admin**: Manages rooms, bookings, and user accounts  
- **Guest**: Books rooms, cancels reservations, updates profile  

#### Communication Model (Client-Server):  
1. **Client**: User interacts via GUI (booking/login requests)  
2. **Server**: Processes requests via Business Logic Layer  
3. **Response**: Displays results in UI  

#### Constraints:  
- ‚ùå No persistent storage (data lost on app closure)  
- ‚ùå Simplified payment simulation (no real gateway)  
- ‚ùå No advanced reporting features  

#### Excluded Features:  
- üö´ Mobile application  
- üö´ Multi-language support  
- üö´ Cloud integration  

---

### 2.2 Functionalities  

#### User Perspective:  
| Functionality    | Description                          | Precondition                     |  
|------------------|--------------------------------------|----------------------------------|  
| Register         | Create account (email/name/password) | -                                |  
| Book Room        | Select room & dates                  | User logged in, room available   |  
| Cancel Booking   | Cancel via booking ID                | User logged in, valid booking ID |  
| Browse Rooms     | View available rooms                 | User logged in                   |  

#### Non-Functional Features:  
1. **Usability**: Intuitive interface for bookings  
2. **Performance**: Fast response to queries  
3. **Scalability**: Handles growing guest/reservation data  

---

## 3. Use Case Diagram  
*(Embed PlantUML-generated diagram here)*  

## 4. Use Case Priorities  

| Use Case       | Priority | Reason                          |  
|----------------|----------|---------------------------------|  
| Book Room      | High     | Core revenue functionality      |  
| Register       | High     | Essential for transactions      |  
| Cancel Booking | Medium   | Secondary to booking            |  

